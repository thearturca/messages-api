version: "3.9"

services:
  postgres:
    image: postgres:16
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_HOST_AUTH_METHOD="password"
      - POSTGRES_DB=${PG_DATABASE}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - PGPORT=${PG_PORT}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:${PG_PORT}:${PG_PORT}"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${PG_USER}"]
      interval: 5s
      retries: 5
    env_file:
      - .env


  zookeeper:
    image: 'confluentinc/cp-zookeeper:7.2.1'
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: 'confluentinc/cp-kafka:7.2.1'
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  migrator:
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PG_HOST: postgres
    
  processor:
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERS: kafka:9092

  consumer:
    depends_on:
      - kafka
      - migrator
    environment:
      PG_HOST: postgres
      KAFKA_BROKERS: kafka:9092

  api:
    depends_on:
      - kafka
    environment:
      PG_HOST: postgres
      KAFKA_BROKERS: kafka:9092

volumes:
  postgres_data:
